Mongoose Integration Testing Process Notes:
===========================================




Objective
=========
The objective of this study is to examine how we we can integrate integration testing into 
a basic restaurant app. Because this study now uses a database, the testing startegy will 
be a bit different from local database REST applications.




Process Workflow Summary
========================
Phase 1: Project Setup
Phase 2: Create basic server
Phase 3: Setup database and server connection
Phase 4: Add initial middleware



Phase 1: Project Setup
======================
    // Project Setup
        1. Create Project folder                 -- The project folder will hold all the files for the project.
        2. npm init                              -- Create a package.json file.
    // Install Expres
        3. npm install express                   -- install express.
    // Add .gitignore file
        4. .gitignore > node_modules             -- add gitignore and add node_modules for version control.
    // Add intial dependencies
        5. npm install mongoose morgan uuid      -- install initial dependencies
    // Create server.
        6. server.js                             -- create your server file.




Phase 2: Create basic server
============================
    1. Create express app:
        ------------------------------------------------
            const express = require('express');
            const app = express();
        ------------------------------------------------
    2. Create basic server:
        --------------------------------------------------------------
            let server;
            server = app.listen('3000', function() {
                console.log('Your app is listening on port 3000...');
            });
        -------------------------------------------------------------
    3. Create basic GET route to test connection:
        -------------------------------------------------------------
            app.get('/', function(req, res) {
                res.send('This test works!');
            });
        -------------------------------------------------------------
        * To test connection, simply go to your browser and go to
          localhost:3000 and you shoudl see "This test works!".





Phase 3: Setup database and server connection
==============================================
    0. Create or import database:
        * In the case of this study, we're going to use a restaurants-app database specifically imported for this project.

    1. Import mongoose:
        ----------------------------------------------
            const mongoose = require('mongoose');
        ----------------------------------------------
    2. Configure mongoose to use ES6 promises:
        -----------------------------------------------
            mongoose.Promise = global.Promise;
        -----------------------------------------------
    3. Create config file:
        -----------------------------
            config                          -- config.js is where constants are controlled for the entire app
        -----------------------------
    4. Create and Export database and Port:
        ------------------------------------------------------------------------------------
            const {DATABASE_URL, PORT} = require('./config.js');
        ------------------------------------------------------------------------------------
    5. Add runServer function:
        ---------------------------------------------------------------------------------------
            function runServer(databaseUrl, port=PORT) {                                                                  // To Run server: 
                return new Promise( function(resolve, reject) {                                                           // return Promise in which...
                    mongoose.connect(databaseUrl, { useNewUrlParser: true,  useUnifiedTopology: true }, function() {      // Mongoose connects to database:
                        if (err) {                                                                                        // If there is an error... 
                            return reject(err);                                                                           // ... return reject.
                        }       

                        server = app.listen(port, function() {                                                            // Listen for connection to configured port.  
                            console.log(`Listening on port ${port}...`);                                                  // ... and log connection in terminal.
                            resolve();                                                                                    // and then the promise is resolved!
                        })
                        .on('error', function() {                                                                         // But if there is an error...
                            mongoose.disconnect();                                                                        // ... disconnect from mongoose...
                            reject(err);                                                                                  // and reject (passing in an error object).
                        });
                    });
                });
            }           
        ---------------------------------------------------------------------------------------
    6. Add closeServer function:
        -----------------------------------------------------------------------------------------------------------
            7. Add closeServer function:
        ---------------------------------------------------------------------------------------------------------------
            function closeServer() {                                                                                       // To close server:
                return mongoose.disconnect().then(function() {                                                                  // disconnect and then...
                    return new Promise(function(resolve, reject) {                                                              // return a promise which...
                        console.log("Closing server");                                                                     // ... will log "closing server"...
                        server.close(function(err) {                                                                              // and close the server...
                    if (err) {                                                                                             // and if there is an error, reject...
                    return reject(err);                                  
                    }
                    resolve();                                                                                             // else resolve.
                });
                });
            });
            }
        -----------------------------------------------------------------------------------------------------------
    7. And incase server.js is called directly:
        ----------------------------------------------------------------------------------
            if (require.main === module) { 
                runServer(DATABASE_URL).catch(function(err) {
                    console.error(err));
                }
            }        
        ----------------------------------------------------------------------------------




Phase 4: Add initial middleware
===============================
    1. 