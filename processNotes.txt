Mongoose Integration Testing Process Notes:
===========================================




Objective
=========
The objective of this study is to examine how we we can integrate integration testing into 
a basic restaurant app. Because this study now uses a database, the testing startegy will 
be a bit different from local database REST applications.




Process Workflow Summary
========================
Phase 1: Project Setup
Phase 2: Create basic server
Phase 3: Setup database and server connection
Phase 4: Add initial middleware
Phase 5: Create a mongoose schema and model (including virtuals and instance methods if needed):
Phase 6: Create route Scaffold:
Phase 7: Create Routes
--------
Phase 8: Implement integration tests



Phase 1: Project Setup
======================
    // Project Setup
        1. Create Project folder                 -- The project folder will hold all the files for the project.
        2. npm init                              -- Create a package.json file.
    // Install Expres
        3. npm install express                   -- install express.
    // Add .gitignore file
        4. .gitignore > node_modules             -- add gitignore and add node_modules for version control.
    // Add intial dependencies
        5. npm install mongoose morgan uuid      -- install initial dependencies
    // Create server.
        6. server.js                             -- create your server file.




Phase 2: Create basic server
============================
    1. Create express app:
        ------------------------------------------------
            const express = require('express');
            const app = express();
        ------------------------------------------------
        
    2. Create basic server:
        --------------------------------------------------------------
            let server;
            server = app.listen('3000', function() {
                console.log('Your app is listening on port 3000...');
            });
        -------------------------------------------------------------

    3. Create basic GET route to test connection:
        -------------------------------------------------------------
            app.get('/', function(req, res) {
                res.send('This test works!');
            });
        -------------------------------------------------------------
        * To test connection, simply go to your browser and go to
          localhost:3000 and you shoudl see "This test works!".





Phase 3: Setup database and server connection
==============================================
    0. Create or import database:
        * In the case of this study, we're going to use a restaurants-app database specifically imported for this project.

    1. Import mongoose:
        ----------------------------------------------
            const mongoose = require('mongoose');
        ----------------------------------------------

    2. Configure mongoose to use ES6 promises:
        -----------------------------------------------
            mongoose.Promise = global.Promise;
        -----------------------------------------------

    3. Create config file:
        -----------------------------
            config                          -- config.js is where constants are controlled for the entire app
        -----------------------------

    4. Create and Export database and Port:
        ------------------------------------------------------------------------------------
            const {DATABASE_URL, PORT} = require('./config.js');
        ------------------------------------------------------------------------------------

    5. Add runServer function:
        ---------------------------------------------------------------------------------------
            function runServer(databaseUrl, port=PORT) {                                                                  // To Run server: 
                return new Promise( function(resolve, reject) {                                                           // return Promise in which...
                    mongoose.connect(databaseUrl, { useNewUrlParser: true,  useUnifiedTopology: true }, function() {      // Mongoose connects to database:
                        if (err) {                                                                                        // If there is an error... 
                            return reject(err);                                                                           // ... return reject.
                        }       

                        server = app.listen(port, function() {                                                            // Listen for connection to configured port.  
                            console.log(`Listening on port ${port}...`);                                                  // ... and log connection in terminal.
                            resolve();                                                                                    // and then the promise is resolved!
                        })
                        .on('error', function() {                                                                         // But if there is an error...
                            mongoose.disconnect();                                                                        // ... disconnect from mongoose...
                            reject(err);                                                                                  // and reject (passing in an error object).
                        });
                    });
                });
            }           
        ---------------------------------------------------------------------------------------

    6. Add closeServer function:
        -----------------------------------------------------------------------------------------------------------
            7. Add closeServer function:
        ---------------------------------------------------------------------------------------------------------------
            function closeServer() {                                                                                       // To close server:
                return mongoose.disconnect().then(function() {                                                                  // disconnect and then...
                    return new Promise(function(resolve, reject) {                                                              // return a promise which...
                        console.log("Closing server");                                                                     // ... will log "closing server"...
                        server.close(function(err) {                                                                              // and close the server...
                    if (err) {                                                                                             // and if there is an error, reject...
                    return reject(err);                                  
                    }
                    resolve();                                                                                             // else resolve.
                });
                });
            });
            }
        -----------------------------------------------------------------------------------------------------------

    7. And incase server.js is called directly:
        ----------------------------------------------------------------------------------
            if (require.main === module) { 
                runServer(DATABASE_URL).catch(function(err) {
                    console.error(err));
                }
            }        
        ----------------------------------------------------------------------------------




Phase 4: Add initial middleware
===============================
    1. Install initial built-in middleware
        -------------------------------------------------
            app.use(express.json);                              -- express.json allows the server to accept incoming requests as a JSON body rather than GET, POST, etc.
        -------------------------------------------------

    2. Install initial third-party middleware
        -------------------------------------------------------
            const morgan = require('morgan')

            app.use(morgan('common'));
        -------------------------------------------------------





Phase 5: Create a mongoose schema and model (including virtuals and instance methods if needed):
================================================================================================
    1. Create a models file:
        ---------------------------- 
            models.js
        ----------------------------

    2. Reference mongoose:
        -----------------------------------------
            const mongoose = require('mongoose');                       -- Load mongoose
        -----------------------------------------

    3. Configure mongoose to use ES6 promises:
        -------------------------------------------
            mongoose.Promise = global.Promise;                          -- Enable mongoose to use ES6 Promises
        -------------------------------------------

    4. Define schema:
        -------------------------------------------------------
            const restaurantSchema = mongoose.Schema({                  -- Schema of a restaurant entry
                name: { type: String, required: true },
                borough: { type: String, required: true },
                cuisine: { type: String, required: true },
                address: {
                    building: String,
                    coord: [String],
                    street: String,
                    zipcode: String
                },
                grades: [
                    {
                    date: Date,
                    grade: String,
                    score: Number
                    }
                ]
            });
        -------------------------------------------------------

    5. Create a model for your schema:
        ------------------------------------------------------------------------------
            const Restaurant = mongoose.model("Restaurant", restaurantSchema);                 -- model for restaurantSchema
        ------------------------------------------------------------------------------

    6. Export the model for use in server.js:
        ----------------------------------------------------------------------
            module.exports = { Restaurant };                                                   -- What will be exported from this module for use elsewhere in the code.
        ----------------------------------------------------------------------

    7. Import the models to your server.js file:
        -------------------------------------------------------------
            const { Restaurant} = require('./models.js');                         -- this imports the "Restaurant" model from models.js file.         
        -------------------------------------------------------------

    8. Create virtuals (if needed):
        -------------------------------------------------------------------------
            restaurantSchema.virtual("addressString").get(function() {                 -- this virtual creates a human readable string from a few of the restaurantSchema properties.
                return `${this.address.building} ${this.address.street}`.trim(); 
            });

            restaurantSchema.virtual("grade").get(function() {                         -- this virtual returns the most recent graded restaurant.
                const gradeObj =
                    this.grades.sort((a, b) => {
                    return b.date - a.date;
                    })[0] || {};
                return gradeObj.grade;
            });
        --------------------------------------------------------------------------

    9. Add instance method (if needed):
        ---------------------------------------------------------------------------
            restaurantSchema.methods.serialize = function() {                         -- 
                return {
                    id: this._id,
                    name: this.name,
                    cuisine: this.cuisine,
                    borough: this.borough,
                    grade: this.grade,
                    address: this.addressString
                };
            };       
        ---------------------------------------------------------------------------
        
Phase 6: Create route Scaffold:
===============================
    1. Create pseudo-Routes:
        --------------------------------------------------------------
                                                                    // GET ALL restaurants
            app.get('/restaurants', (req, res) => {                       // for all, we want the direct path.

            });

                                                                    // GET One restaurants  
            app.get('/restaurants/:id', (req, res) => {                   // to get one restaurants, we need to add the :id  parameter (represents the restaurants).

            });

                                                                    // CREATE restaurants                                  
            app.post('/restaurants', (req, res) => {                      // Create a restaurants on the general route.

            });

                                                                    // UPDATE restaurants
            app.put('/restaurants/:id', (req, res) => {                   // update with "patch" and the :id parameter

            });

                                                                    // DELETE restaurants at the /restaurants endpoint                                 
            app.delete('restaurants/:id', (req, res) => {                 // delete with user id parameter.

            });
                                                                   // DELETE restaurants
            app.delete(':id', (req, res) => {                      // delete with user id parameter.

            });
        --------------------------------------------------------------




Phase 7: Create Routes
=======================
    7.1: GET 10 restaurants
    --------------------------------------------------------------------
        app.get('/restaurants', (req, res) => {
            Restaurant
                .find()
                .limit(10)                                                             // limit to 10 (because 25K + in database) 
                .then(restaurants => {                                                 // success callback for each restaurant we get back, call serialize to only expose info we want
                res.json({
                    restaurants: restaurants.map(
                    (restaurant) => restaurant.serialize())
                });
                })
                .catch(err => {                                                        // If there's a en error, return error
                console.error(err);
                res.status(500).json({ message: 'Internal server error' });
                });
            });
    --------------------------------------------------------------------

    7.2: GET restaurant by ID:
    -----------------------------------------------------------------------
        app.get('/restaurants/:id', (req, res) => {
            Restaurant
                .findById(req.params.id)                                                // convenience method provided by mongoose for searching by object id
                .then(restaurant => res.json(restaurant.serialize()))
                .catch(err => {
                console.error(err);
                res.status(500).json({ message: 'Internal server error' });
                });
            });
    -----------------------------------------------------------------------

    7.3: POST restaurant:
    ------------------------------------------------------------------------
        app.post('/restaurants', (req, res) => {

        const requiredFields = ['name', 'borough', 'cuisine'];
        for (let i = 0; i < requiredFields.length; i++) {
            const field = requiredFields[i];
            if (!(field in req.body)) {
            const message = `Missing \`${field}\` in request body`;
            console.error(message);
            return res.status(400).send(message);
            }
        }

        Restaurant
            .create({
            name: req.body.name,
            borough: req.body.borough,
            cuisine: req.body.cuisine,
            grades: req.body.grades,
            address: req.body.address
            })
            .then(restaurant => res.status(201).json(restaurant.serialize()))
            .catch(err => {
            console.error(err);
            res.status(500).json({ message: 'Internal server error' });
            });
        });
    ------------------------------------------------------------------------

    7.4: PUT (edit) restaurant:
    -------------------------------------------------------------------------------
        app.put('/restaurants/:id', (req, res) => {
            if (!(req.params.id && req.body.id && req.params.id === req.body.id)) {              // see if the id and the request match
                const message = (
                `Request path id (${req.params.id}) and request body id ` +
                `(${req.body.id}) must match`);
                console.error(message);
                return res.status(400).json({ message: message });
            }

            const toUpdate = {};                                                                 // we only support a subset of fields being updateable. if the user sent over any of the updatableFields, we udpate those values in document
            const updateableFields = ['name', 'borough', 'cuisine', 'address'];

            updateableFields.forEach(field => {
                if (field in req.body) {
                toUpdate[field] = req.body[field];
                }
            });

            Restaurant
                .findByIdAndUpdate(req.params.id, { $set: toUpdate })                            // all key/value pairs in toUpdate will be updated -- that's what `$set` does
                .then(restaurant => res.status(204).end())
                .catch(err => res.status(500).json({ message: 'Internal server error' }));
            });
    -------------------------------------------------------------------------------

    7.5: DELETE request:
    ----------------------------------------------------------------------------------
        app.delete('/restaurants/:id', (req, res) => {
            Restaurant
                .findByIdAndRemove(req.params.id)
                .then(restaurant => res.status(204).end())
                .catch(err => res.status(500).json({ message: 'Internal server error' }));
            });
    ----------------------------------------------------------------------------------

    7.6: Add catch-all endpoint if client makes a request to a non-existent endpoint
    ----------------------------------------------------------------------------------
        app.use('*', function (req, res) {
            res.status(404).json({ message: 'Not Found' });
        });
    ----------------------------------------------------------------------------------



    Phase 8: Implement integration tests
    ====================================
        1.1: Install initial devDependencies:
            * chai = test expectation library that helps make asserations with functions and methods to compare
                     the output of tests with expected values.
            * chai-http = gives access to methods like chai.request whcih can be used to make arbitrary requests 
                          to a server and then make assert about the results of the request.
        --------------------------------------------------
            npm install chai chai-http --save-dev
        --------------------------------------------------